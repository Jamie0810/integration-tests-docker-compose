// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: order/order.proto

package order

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OrderStatus int32

const (
	OrderStatus_STATUS_UNKNOW   OrderStatus = 0
	OrderStatus_TO_BE_CONFIRMED OrderStatus = 1
	OrderStatus_PROCESSING      OrderStatus = 2
	OrderStatus_SUCCEED         OrderStatus = 3
	OrderStatus_FAILED          OrderStatus = 4
	OrderStatus_PAUSED          OrderStatus = 5
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "STATUS_UNKNOW",
		1: "TO_BE_CONFIRMED",
		2: "PROCESSING",
		3: "SUCCEED",
		4: "FAILED",
		5: "PAUSED",
	}
	OrderStatus_value = map[string]int32{
		"STATUS_UNKNOW":   0,
		"TO_BE_CONFIRMED": 1,
		"PROCESSING":      2,
		"SUCCEED":         3,
		"FAILED":          4,
		"PAUSED":          5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_order_proto_enumTypes[0].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_order_order_proto_enumTypes[0]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{0}
}

type OrderStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrackingNumber      string  `protobuf:"bytes,1,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`
	MerchantOrderNumber string  `protobuf:"bytes,2,opt,name=MerchantOrderNumber,proto3" json:"MerchantOrderNumber,omitempty"`
	Balance             float64 `protobuf:"fixed64,3,opt,name=Balance,proto3" json:"Balance,omitempty"`
	TransactionType     string  `protobuf:"bytes,4,opt,name=TransactionType,proto3" json:"TransactionType,omitempty"`
	RequestStatus       string  `protobuf:"bytes,5,opt,name=RequestStatus,proto3" json:"RequestStatus,omitempty"`
	RequestMessage      string  `protobuf:"bytes,6,opt,name=RequestMessage,proto3" json:"RequestMessage,omitempty"`
}

func (x *OrderStatusReq) Reset() {
	*x = OrderStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusReq) ProtoMessage() {}

func (x *OrderStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusReq.ProtoReflect.Descriptor instead.
func (*OrderStatusReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderStatusReq) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

func (x *OrderStatusReq) GetMerchantOrderNumber() string {
	if x != nil {
		return x.MerchantOrderNumber
	}
	return ""
}

func (x *OrderStatusReq) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *OrderStatusReq) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *OrderStatusReq) GetRequestStatus() string {
	if x != nil {
		return x.RequestStatus
	}
	return ""
}

func (x *OrderStatusReq) GetRequestMessage() string {
	if x != nil {
		return x.RequestMessage
	}
	return ""
}

type OrderStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestMessage string `protobuf:"bytes,1,opt,name=RequestMessage,proto3" json:"RequestMessage,omitempty"`
}

func (x *OrderStatusResp) Reset() {
	*x = OrderStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStatusResp) ProtoMessage() {}

func (x *OrderStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStatusResp.ProtoReflect.Descriptor instead.
func (*OrderStatusResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderStatusResp) GetRequestMessage() string {
	if x != nil {
		return x.RequestMessage
	}
	return ""
}

type OrderQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantID          uint64 `protobuf:"varint,1,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	ProjectID           uint64 `protobuf:"varint,2,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	MerchantOrderNumber string `protobuf:"bytes,3,opt,name=MerchantOrderNumber,proto3" json:"MerchantOrderNumber,omitempty"`
}

func (x *OrderQueryReq) Reset() {
	*x = OrderQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryReq) ProtoMessage() {}

func (x *OrderQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryReq.ProtoReflect.Descriptor instead.
func (*OrderQueryReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderQueryReq) GetMerchantID() uint64 {
	if x != nil {
		return x.MerchantID
	}
	return 0
}

func (x *OrderQueryReq) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *OrderQueryReq) GetMerchantOrderNumber() string {
	if x != nil {
		return x.MerchantOrderNumber
	}
	return ""
}

type OrderQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchatOrderNumber  string      `protobuf:"bytes,1,opt,name=MerchatOrderNumber,proto3" json:"MerchatOrderNumber,omitempty"`
	PlatformOrderNumber string      `protobuf:"bytes,2,opt,name=PlatformOrderNumber,proto3" json:"PlatformOrderNumber,omitempty"`
	MerchantNotifyURL   string      `protobuf:"bytes,3,opt,name=MerchantNotifyURL,proto3" json:"MerchantNotifyURL,omitempty"`
	PlayerID            string      `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`
	EstimatedAmount     float64     `protobuf:"fixed64,5,opt,name=EstimatedAmount,proto3" json:"EstimatedAmount,omitempty"`
	ActualAmount        float64     `protobuf:"fixed64,6,opt,name=ActualAmount,proto3" json:"ActualAmount,omitempty"`
	OrderStatus         OrderStatus `protobuf:"varint,7,opt,name=OrderStatus,proto3,enum=order.OrderStatus" json:"OrderStatus,omitempty"`
	CreatedAt           string      `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt           string      `protobuf:"bytes,9,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	Code                string      `protobuf:"bytes,10,opt,name=Code,proto3" json:"Code,omitempty"`
	ErrorMessage        string      `protobuf:"bytes,11,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	AccountNumber       string      `protobuf:"bytes,12,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	BankCode            string      `protobuf:"bytes,13,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	BankName            string      `protobuf:"bytes,14,opt,name=BankName,proto3" json:"BankName,omitempty"`
	AccountNumberRec    string      `protobuf:"bytes,15,opt,name=AccountNumberRec,proto3" json:"AccountNumberRec,omitempty"`
	BankCodeRec         string      `protobuf:"bytes,16,opt,name=BankCodeRec,proto3" json:"BankCodeRec,omitempty"`
	BankNameRec         string      `protobuf:"bytes,17,opt,name=BankNameRec,proto3" json:"BankNameRec,omitempty"`
	CompletedAt         string      `protobuf:"bytes,18,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
}

func (x *OrderQueryResp) Reset() {
	*x = OrderQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderQueryResp) ProtoMessage() {}

func (x *OrderQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderQueryResp.ProtoReflect.Descriptor instead.
func (*OrderQueryResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{3}
}

func (x *OrderQueryResp) GetMerchatOrderNumber() string {
	if x != nil {
		return x.MerchatOrderNumber
	}
	return ""
}

func (x *OrderQueryResp) GetPlatformOrderNumber() string {
	if x != nil {
		return x.PlatformOrderNumber
	}
	return ""
}

func (x *OrderQueryResp) GetMerchantNotifyURL() string {
	if x != nil {
		return x.MerchantNotifyURL
	}
	return ""
}

func (x *OrderQueryResp) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *OrderQueryResp) GetEstimatedAmount() float64 {
	if x != nil {
		return x.EstimatedAmount
	}
	return 0
}

func (x *OrderQueryResp) GetActualAmount() float64 {
	if x != nil {
		return x.ActualAmount
	}
	return 0
}

func (x *OrderQueryResp) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_STATUS_UNKNOW
}

func (x *OrderQueryResp) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderQueryResp) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *OrderQueryResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OrderQueryResp) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *OrderQueryResp) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *OrderQueryResp) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *OrderQueryResp) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *OrderQueryResp) GetAccountNumberRec() string {
	if x != nil {
		return x.AccountNumberRec
	}
	return ""
}

func (x *OrderQueryResp) GetBankCodeRec() string {
	if x != nil {
		return x.BankCodeRec
	}
	return ""
}

func (x *OrderQueryResp) GetBankNameRec() string {
	if x != nil {
		return x.BankNameRec
	}
	return ""
}

func (x *OrderQueryResp) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

type OrderCompareMerchantWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantIDs []uint64 `protobuf:"varint,1,rep,packed,name=MerchantIDs,proto3" json:"MerchantIDs,omitempty"`
	CurrentTime int64    `protobuf:"varint,2,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`
	PastTime    int64    `protobuf:"varint,3,opt,name=PastTime,proto3" json:"PastTime,omitempty"`
}

func (x *OrderCompareMerchantWithdrawReq) Reset() {
	*x = OrderCompareMerchantWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareMerchantWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareMerchantWithdrawReq) ProtoMessage() {}

func (x *OrderCompareMerchantWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareMerchantWithdrawReq.ProtoReflect.Descriptor instead.
func (*OrderCompareMerchantWithdrawReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderCompareMerchantWithdrawReq) GetMerchantIDs() []uint64 {
	if x != nil {
		return x.MerchantIDs
	}
	return nil
}

func (x *OrderCompareMerchantWithdrawReq) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *OrderCompareMerchantWithdrawReq) GetPastTime() int64 {
	if x != nil {
		return x.PastTime
	}
	return 0
}

type OrderCompareMerchantWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantID  uint64  `protobuf:"varint,1,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	CurrentCost float64 `protobuf:"fixed64,2,opt,name=CurrentCost,proto3" json:"CurrentCost,omitempty"`
	PastCost    float64 `protobuf:"fixed64,3,opt,name=PastCost,proto3" json:"PastCost,omitempty"`
}

func (x *OrderCompareMerchantWithdraw) Reset() {
	*x = OrderCompareMerchantWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareMerchantWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareMerchantWithdraw) ProtoMessage() {}

func (x *OrderCompareMerchantWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareMerchantWithdraw.ProtoReflect.Descriptor instead.
func (*OrderCompareMerchantWithdraw) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{5}
}

func (x *OrderCompareMerchantWithdraw) GetMerchantID() uint64 {
	if x != nil {
		return x.MerchantID
	}
	return 0
}

func (x *OrderCompareMerchantWithdraw) GetCurrentCost() float64 {
	if x != nil {
		return x.CurrentCost
	}
	return 0
}

func (x *OrderCompareMerchantWithdraw) GetPastCost() float64 {
	if x != nil {
		return x.PastCost
	}
	return 0
}

type OrderCompareMerchantWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Costs []*OrderCompareMerchantWithdraw `protobuf:"bytes,1,rep,name=Costs,proto3" json:"Costs,omitempty"`
}

func (x *OrderCompareMerchantWithdrawResp) Reset() {
	*x = OrderCompareMerchantWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareMerchantWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareMerchantWithdrawResp) ProtoMessage() {}

func (x *OrderCompareMerchantWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareMerchantWithdrawResp.ProtoReflect.Descriptor instead.
func (*OrderCompareMerchantWithdrawResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{6}
}

func (x *OrderCompareMerchantWithdrawResp) GetCosts() []*OrderCompareMerchantWithdraw {
	if x != nil {
		return x.Costs
	}
	return nil
}

type OrderCompareChannelWithdrawReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCodes []string `protobuf:"bytes,1,rep,name=ChannelCodes,proto3" json:"ChannelCodes,omitempty"`
	CurrentTime  int64    `protobuf:"varint,2,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`
	PastTime     int64    `protobuf:"varint,3,opt,name=PastTime,proto3" json:"PastTime,omitempty"`
}

func (x *OrderCompareChannelWithdrawReq) Reset() {
	*x = OrderCompareChannelWithdrawReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareChannelWithdrawReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareChannelWithdrawReq) ProtoMessage() {}

func (x *OrderCompareChannelWithdrawReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareChannelWithdrawReq.ProtoReflect.Descriptor instead.
func (*OrderCompareChannelWithdrawReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{7}
}

func (x *OrderCompareChannelWithdrawReq) GetChannelCodes() []string {
	if x != nil {
		return x.ChannelCodes
	}
	return nil
}

func (x *OrderCompareChannelWithdrawReq) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *OrderCompareChannelWithdrawReq) GetPastTime() int64 {
	if x != nil {
		return x.PastTime
	}
	return 0
}

type OrderCompareChannelWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID   uint64  `protobuf:"varint,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	ChannelCode string  `protobuf:"bytes,2,opt,name=ChannelCode,proto3" json:"ChannelCode,omitempty"`
	CurrentCost float64 `protobuf:"fixed64,3,opt,name=CurrentCost,proto3" json:"CurrentCost,omitempty"`
	PastCost    float64 `protobuf:"fixed64,4,opt,name=PastCost,proto3" json:"PastCost,omitempty"`
}

func (x *OrderCompareChannelWithdraw) Reset() {
	*x = OrderCompareChannelWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareChannelWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareChannelWithdraw) ProtoMessage() {}

func (x *OrderCompareChannelWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareChannelWithdraw.ProtoReflect.Descriptor instead.
func (*OrderCompareChannelWithdraw) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{8}
}

func (x *OrderCompareChannelWithdraw) GetChannelID() uint64 {
	if x != nil {
		return x.ChannelID
	}
	return 0
}

func (x *OrderCompareChannelWithdraw) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

func (x *OrderCompareChannelWithdraw) GetCurrentCost() float64 {
	if x != nil {
		return x.CurrentCost
	}
	return 0
}

func (x *OrderCompareChannelWithdraw) GetPastCost() float64 {
	if x != nil {
		return x.PastCost
	}
	return 0
}

type OrderCompareChannelWithdrawResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Costs []*OrderCompareChannelWithdraw `protobuf:"bytes,1,rep,name=Costs,proto3" json:"Costs,omitempty"`
}

func (x *OrderCompareChannelWithdrawResp) Reset() {
	*x = OrderCompareChannelWithdrawResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareChannelWithdrawResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareChannelWithdrawResp) ProtoMessage() {}

func (x *OrderCompareChannelWithdrawResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareChannelWithdrawResp.ProtoReflect.Descriptor instead.
func (*OrderCompareChannelWithdrawResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{9}
}

func (x *OrderCompareChannelWithdrawResp) GetCosts() []*OrderCompareChannelWithdraw {
	if x != nil {
		return x.Costs
	}
	return nil
}

type OrderCompareNotCallbackCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        int64  `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	TimeRange   string `protobuf:"bytes,2,opt,name=TimeRange,proto3" json:"TimeRange,omitempty"` // 指定的時間區間
	ChannelCode string `protobuf:"bytes,3,opt,name=channel_code,json=channelCode,proto3" json:"channel_code,omitempty"`
}

func (x *OrderCompareNotCallbackCountReq) Reset() {
	*x = OrderCompareNotCallbackCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareNotCallbackCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareNotCallbackCountReq) ProtoMessage() {}

func (x *OrderCompareNotCallbackCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareNotCallbackCountReq.ProtoReflect.Descriptor instead.
func (*OrderCompareNotCallbackCountReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{10}
}

func (x *OrderCompareNotCallbackCountReq) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OrderCompareNotCallbackCountReq) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *OrderCompareNotCallbackCountReq) GetChannelCode() string {
	if x != nil {
		return x.ChannelCode
	}
	return ""
}

type OrderCompareNotCallbackCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *OrderCompareNotCallbackCountResp) Reset() {
	*x = OrderCompareNotCallbackCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCompareNotCallbackCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCompareNotCallbackCountResp) ProtoMessage() {}

func (x *OrderCompareNotCallbackCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCompareNotCallbackCountResp.ProtoReflect.Descriptor instead.
func (*OrderCompareNotCallbackCountResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{11}
}

func (x *OrderCompareNotCallbackCountResp) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type OrderChannelCodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderChannelCodesReq) Reset() {
	*x = OrderChannelCodesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderChannelCodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderChannelCodesReq) ProtoMessage() {}

func (x *OrderChannelCodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderChannelCodesReq.ProtoReflect.Descriptor instead.
func (*OrderChannelCodesReq) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{12}
}

type OrderChannelCodesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelCodes []string `protobuf:"bytes,1,rep,name=ChannelCodes,proto3" json:"ChannelCodes,omitempty"`
}

func (x *OrderChannelCodesResp) Reset() {
	*x = OrderChannelCodesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderChannelCodesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderChannelCodesResp) ProtoMessage() {}

func (x *OrderChannelCodesResp) ProtoReflect() protoreflect.Message {
	mi := &file_order_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderChannelCodesResp.ProtoReflect.Descriptor instead.
func (*OrderChannelCodesResp) Descriptor() ([]byte, []int) {
	return file_order_order_proto_rawDescGZIP(), []int{13}
}

func (x *OrderChannelCodesResp) GetChannelCodes() []string {
	if x != nil {
		return x.ChannelCodes
	}
	return nil
}

var File_order_order_proto protoreflect.FileDescriptor

var file_order_order_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xa4, 0x05, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x52, 0x4c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x81, 0x01, 0x0a,
	0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x7c, 0x0a, 0x1c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74, 0x22, 0x5d,
	0x0a, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x1e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x50, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x5b, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x05, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x76, 0x0a,
	0x1f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x20, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x16, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22, 0x3b, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x2a, 0x6a, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x05,
	0x32, 0xb3, 0x04, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x1c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x26,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x25, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x71, 0x0a, 0x1c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4e, 0x6f,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_order_proto_rawDescOnce sync.Once
	file_order_order_proto_rawDescData = file_order_order_proto_rawDesc
)

func file_order_order_proto_rawDescGZIP() []byte {
	file_order_order_proto_rawDescOnce.Do(func() {
		file_order_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_order_proto_rawDescData)
	})
	return file_order_order_proto_rawDescData
}

var file_order_order_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_order_order_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_order_order_proto_goTypes = []interface{}{
	(OrderStatus)(0),                         // 0: order.OrderStatus
	(*OrderStatusReq)(nil),                   // 1: order.OrderStatusReq
	(*OrderStatusResp)(nil),                  // 2: order.OrderStatusResp
	(*OrderQueryReq)(nil),                    // 3: order.OrderQueryReq
	(*OrderQueryResp)(nil),                   // 4: order.OrderQueryResp
	(*OrderCompareMerchantWithdrawReq)(nil),  // 5: order.OrderCompareMerchantWithdrawReq
	(*OrderCompareMerchantWithdraw)(nil),     // 6: order.OrderCompareMerchantWithdraw
	(*OrderCompareMerchantWithdrawResp)(nil), // 7: order.OrderCompareMerchantWithdrawResp
	(*OrderCompareChannelWithdrawReq)(nil),   // 8: order.OrderCompareChannelWithdrawReq
	(*OrderCompareChannelWithdraw)(nil),      // 9: order.OrderCompareChannelWithdraw
	(*OrderCompareChannelWithdrawResp)(nil),  // 10: order.OrderCompareChannelWithdrawResp
	(*OrderCompareNotCallbackCountReq)(nil),  // 11: order.OrderCompareNotCallbackCountReq
	(*OrderCompareNotCallbackCountResp)(nil), // 12: order.OrderCompareNotCallbackCountResp
	(*OrderChannelCodesReq)(nil),             // 13: order.OrderChannelCodesReq
	(*OrderChannelCodesResp)(nil),            // 14: order.OrderChannelCodesResp
}
var file_order_order_proto_depIdxs = []int32{
	0,  // 0: order.OrderQueryResp.OrderStatus:type_name -> order.OrderStatus
	6,  // 1: order.OrderCompareMerchantWithdrawResp.Costs:type_name -> order.OrderCompareMerchantWithdraw
	9,  // 2: order.OrderCompareChannelWithdrawResp.Costs:type_name -> order.OrderCompareChannelWithdraw
	1,  // 3: order.OrderService.OrderStatus:input_type -> order.OrderStatusReq
	3,  // 4: order.OrderService.OrderQuery:input_type -> order.OrderQueryReq
	5,  // 5: order.OrderService.OrderCompareMerchantWithdraw:input_type -> order.OrderCompareMerchantWithdrawReq
	8,  // 6: order.OrderService.OrderCompareChannelWithdraw:input_type -> order.OrderCompareChannelWithdrawReq
	11, // 7: order.OrderService.OrderCompareNotCallbackCount:input_type -> order.OrderCompareNotCallbackCountReq
	13, // 8: order.OrderService.OrderChannelCodes:input_type -> order.OrderChannelCodesReq
	2,  // 9: order.OrderService.OrderStatus:output_type -> order.OrderStatusResp
	4,  // 10: order.OrderService.OrderQuery:output_type -> order.OrderQueryResp
	7,  // 11: order.OrderService.OrderCompareMerchantWithdraw:output_type -> order.OrderCompareMerchantWithdrawResp
	10, // 12: order.OrderService.OrderCompareChannelWithdraw:output_type -> order.OrderCompareChannelWithdrawResp
	12, // 13: order.OrderService.OrderCompareNotCallbackCount:output_type -> order.OrderCompareNotCallbackCountResp
	14, // 14: order.OrderService.OrderChannelCodes:output_type -> order.OrderChannelCodesResp
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_order_order_proto_init() }
func file_order_order_proto_init() {
	if File_order_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_order_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareMerchantWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareMerchantWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareMerchantWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareChannelWithdrawReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareChannelWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareChannelWithdrawResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareNotCallbackCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCompareNotCallbackCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderChannelCodesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderChannelCodesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_order_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_order_proto_goTypes,
		DependencyIndexes: file_order_order_proto_depIdxs,
		EnumInfos:         file_order_order_proto_enumTypes,
		MessageInfos:      file_order_order_proto_msgTypes,
	}.Build()
	File_order_order_proto = out.File
	file_order_order_proto_rawDesc = nil
	file_order_order_proto_goTypes = nil
	file_order_order_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderServiceClient interface {
	// 建單是否成功之狀態回調
	OrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*OrderStatusResp, error)
	// 查詢訂單
	OrderQuery(ctx context.Context, in *OrderQueryReq, opts ...grpc.CallOption) (*OrderQueryResp, error)
	// 商戶打款預警
	OrderCompareMerchantWithdraw(ctx context.Context, in *OrderCompareMerchantWithdrawReq, opts ...grpc.CallOption) (*OrderCompareMerchantWithdrawResp, error)
	// 渠道打款預警
	OrderCompareChannelWithdraw(ctx context.Context, in *OrderCompareChannelWithdrawReq, opts ...grpc.CallOption) (*OrderCompareChannelWithdrawResp, error)
	// 訂單未回調預警
	OrderCompareNotCallbackCount(ctx context.Context, in *OrderCompareNotCallbackCountReq, opts ...grpc.CallOption) (*OrderCompareNotCallbackCountResp, error)
	// 查詢渠道code列表
	OrderChannelCodes(ctx context.Context, in *OrderChannelCodesReq, opts ...grpc.CallOption) (*OrderChannelCodesResp, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) OrderStatus(ctx context.Context, in *OrderStatusReq, opts ...grpc.CallOption) (*OrderStatusResp, error) {
	out := new(OrderStatusResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderQuery(ctx context.Context, in *OrderQueryReq, opts ...grpc.CallOption) (*OrderQueryResp, error) {
	out := new(OrderQueryResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderCompareMerchantWithdraw(ctx context.Context, in *OrderCompareMerchantWithdrawReq, opts ...grpc.CallOption) (*OrderCompareMerchantWithdrawResp, error) {
	out := new(OrderCompareMerchantWithdrawResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderCompareMerchantWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderCompareChannelWithdraw(ctx context.Context, in *OrderCompareChannelWithdrawReq, opts ...grpc.CallOption) (*OrderCompareChannelWithdrawResp, error) {
	out := new(OrderCompareChannelWithdrawResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderCompareChannelWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderCompareNotCallbackCount(ctx context.Context, in *OrderCompareNotCallbackCountReq, opts ...grpc.CallOption) (*OrderCompareNotCallbackCountResp, error) {
	out := new(OrderCompareNotCallbackCountResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderCompareNotCallbackCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderChannelCodes(ctx context.Context, in *OrderChannelCodesReq, opts ...grpc.CallOption) (*OrderChannelCodesResp, error) {
	out := new(OrderChannelCodesResp)
	err := c.cc.Invoke(ctx, "/order.OrderService/OrderChannelCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
type OrderServiceServer interface {
	// 建單是否成功之狀態回調
	OrderStatus(context.Context, *OrderStatusReq) (*OrderStatusResp, error)
	// 查詢訂單
	OrderQuery(context.Context, *OrderQueryReq) (*OrderQueryResp, error)
	// 商戶打款預警
	OrderCompareMerchantWithdraw(context.Context, *OrderCompareMerchantWithdrawReq) (*OrderCompareMerchantWithdrawResp, error)
	// 渠道打款預警
	OrderCompareChannelWithdraw(context.Context, *OrderCompareChannelWithdrawReq) (*OrderCompareChannelWithdrawResp, error)
	// 訂單未回調預警
	OrderCompareNotCallbackCount(context.Context, *OrderCompareNotCallbackCountReq) (*OrderCompareNotCallbackCountResp, error)
	// 查詢渠道code列表
	OrderChannelCodes(context.Context, *OrderChannelCodesReq) (*OrderChannelCodesResp, error)
}

// UnimplementedOrderServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (*UnimplementedOrderServiceServer) OrderStatus(context.Context, *OrderStatusReq) (*OrderStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderStatus not implemented")
}
func (*UnimplementedOrderServiceServer) OrderQuery(context.Context, *OrderQueryReq) (*OrderQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderQuery not implemented")
}
func (*UnimplementedOrderServiceServer) OrderCompareMerchantWithdraw(context.Context, *OrderCompareMerchantWithdrawReq) (*OrderCompareMerchantWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCompareMerchantWithdraw not implemented")
}
func (*UnimplementedOrderServiceServer) OrderCompareChannelWithdraw(context.Context, *OrderCompareChannelWithdrawReq) (*OrderCompareChannelWithdrawResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCompareChannelWithdraw not implemented")
}
func (*UnimplementedOrderServiceServer) OrderCompareNotCallbackCount(context.Context, *OrderCompareNotCallbackCountReq) (*OrderCompareNotCallbackCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCompareNotCallbackCount not implemented")
}
func (*UnimplementedOrderServiceServer) OrderChannelCodes(context.Context, *OrderChannelCodesReq) (*OrderChannelCodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderChannelCodes not implemented")
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_OrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderStatus(ctx, req.(*OrderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderQuery(ctx, req.(*OrderQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderCompareMerchantWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCompareMerchantWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderCompareMerchantWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderCompareMerchantWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderCompareMerchantWithdraw(ctx, req.(*OrderCompareMerchantWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderCompareChannelWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCompareChannelWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderCompareChannelWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderCompareChannelWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderCompareChannelWithdraw(ctx, req.(*OrderCompareChannelWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderCompareNotCallbackCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderCompareNotCallbackCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderCompareNotCallbackCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderCompareNotCallbackCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderCompareNotCallbackCount(ctx, req.(*OrderCompareNotCallbackCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderChannelCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderChannelCodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderChannelCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/OrderChannelCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderChannelCodes(ctx, req.(*OrderChannelCodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrderStatus",
			Handler:    _OrderService_OrderStatus_Handler,
		},
		{
			MethodName: "OrderQuery",
			Handler:    _OrderService_OrderQuery_Handler,
		},
		{
			MethodName: "OrderCompareMerchantWithdraw",
			Handler:    _OrderService_OrderCompareMerchantWithdraw_Handler,
		},
		{
			MethodName: "OrderCompareChannelWithdraw",
			Handler:    _OrderService_OrderCompareChannelWithdraw_Handler,
		},
		{
			MethodName: "OrderCompareNotCallbackCount",
			Handler:    _OrderService_OrderCompareNotCallbackCount_Handler,
		},
		{
			MethodName: "OrderChannelCodes",
			Handler:    _OrderService_OrderChannelCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/order.proto",
}
