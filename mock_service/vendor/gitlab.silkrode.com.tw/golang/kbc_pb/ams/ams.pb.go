// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: ams/ams.proto

package ams

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PaymentErrorType int32

const (
	PaymentErrorType_NO_ERROR                  PaymentErrorType = 0  // 沒有錯誤
	PaymentErrorType_OVER_DAILY_LIMIT          PaymentErrorType = 1  // 超過單日額度
	PaymentErrorType_OVER_CREATE_FREQUENCY     PaymentErrorType = 2  // 超過M分鐘建立 N筆訂單
	PaymentErrorType_BECLOCKED                 PaymentErrorType = 3  // 被黑名單擋掉
	PaymentErrorType_NO_CHANNEL                PaymentErrorType = 4  // 沒有支援的付款渠道
	PaymentErrorType_ERR_PAYMENT               PaymentErrorType = 5  // 檢查付款方式發生錯誤
	PaymentErrorType_INVALID_PAYMENT           PaymentErrorType = 6  // 不支援的付款方式
	PaymentErrorType_NOFOUND_PRODUCTAPI        PaymentErrorType = 7  // 找不到產品接口
	PaymentErrorType_DISABLE_PRODUCTAPI        PaymentErrorType = 8  // 產品接口未啟用
	PaymentErrorType_NOFOUND_MERCHANT          PaymentErrorType = 9  // 找不到商戶
	PaymentErrorType_DISABLE_MERCHANT          PaymentErrorType = 10 // 商戶未啟用
	PaymentErrorType_DISABLE_MERCHANT_DEPOSIT  PaymentErrorType = 11 // 商戶未啟用打款
	PaymentErrorType_DISABLE_MERCHANT_WITHDRAW PaymentErrorType = 12 // 商戶未啟用收款
	PaymentErrorType_NOFOUND_PROJECT           PaymentErrorType = 13 // 找不到項目
	PaymentErrorType_DISABLE_PROJECT           PaymentErrorType = 14 // 項目未啟用
	PaymentErrorType_NOFOUND_PRODUCT           PaymentErrorType = 15 // 找不到產品
	PaymentErrorType_DISABLE_PRODUCT           PaymentErrorType = 16 // 產品未啟用
	PaymentErrorType_ERR_BLACKLISST            PaymentErrorType = 17 // 取得黑名單錯誤
	PaymentErrorType_ERR_CHECK_FREQUENCY       PaymentErrorType = 18 // 檢查玩家打單頻率錯誤
	PaymentErrorType_ERR_DAILY_LIMIT           PaymentErrorType = 19 // 檢查單日額度錯誤
	PaymentErrorType_ERR_FEE                   PaymentErrorType = 20 // 取得手續費設定錯誤
	PaymentErrorType_ERR_MARK_ORDER            PaymentErrorType = 21 // 標記成功訂單失敗（計算建單頻率用）
	PaymentErrorType_PAUSE                     PaymentErrorType = 22 // 風控暫停
	PaymentErrorType_OTHERS                    PaymentErrorType = 23 // 其他錯誤
)

// Enum value maps for PaymentErrorType.
var (
	PaymentErrorType_name = map[int32]string{
		0:  "NO_ERROR",
		1:  "OVER_DAILY_LIMIT",
		2:  "OVER_CREATE_FREQUENCY",
		3:  "BECLOCKED",
		4:  "NO_CHANNEL",
		5:  "ERR_PAYMENT",
		6:  "INVALID_PAYMENT",
		7:  "NOFOUND_PRODUCTAPI",
		8:  "DISABLE_PRODUCTAPI",
		9:  "NOFOUND_MERCHANT",
		10: "DISABLE_MERCHANT",
		11: "DISABLE_MERCHANT_DEPOSIT",
		12: "DISABLE_MERCHANT_WITHDRAW",
		13: "NOFOUND_PROJECT",
		14: "DISABLE_PROJECT",
		15: "NOFOUND_PRODUCT",
		16: "DISABLE_PRODUCT",
		17: "ERR_BLACKLISST",
		18: "ERR_CHECK_FREQUENCY",
		19: "ERR_DAILY_LIMIT",
		20: "ERR_FEE",
		21: "ERR_MARK_ORDER",
		22: "PAUSE",
		23: "OTHERS",
	}
	PaymentErrorType_value = map[string]int32{
		"NO_ERROR":                  0,
		"OVER_DAILY_LIMIT":          1,
		"OVER_CREATE_FREQUENCY":     2,
		"BECLOCKED":                 3,
		"NO_CHANNEL":                4,
		"ERR_PAYMENT":               5,
		"INVALID_PAYMENT":           6,
		"NOFOUND_PRODUCTAPI":        7,
		"DISABLE_PRODUCTAPI":        8,
		"NOFOUND_MERCHANT":          9,
		"DISABLE_MERCHANT":          10,
		"DISABLE_MERCHANT_DEPOSIT":  11,
		"DISABLE_MERCHANT_WITHDRAW": 12,
		"NOFOUND_PROJECT":           13,
		"DISABLE_PROJECT":           14,
		"NOFOUND_PRODUCT":           15,
		"DISABLE_PRODUCT":           16,
		"ERR_BLACKLISST":            17,
		"ERR_CHECK_FREQUENCY":       18,
		"ERR_DAILY_LIMIT":           19,
		"ERR_FEE":                   20,
		"ERR_MARK_ORDER":            21,
		"PAUSE":                     22,
		"OTHERS":                    23,
	}
)

func (x PaymentErrorType) Enum() *PaymentErrorType {
	p := new(PaymentErrorType)
	*p = x
	return p
}

func (x PaymentErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_ams_ams_proto_enumTypes[0].Descriptor()
}

func (PaymentErrorType) Type() protoreflect.EnumType {
	return &file_ams_ams_proto_enumTypes[0]
}

func (x PaymentErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentErrorType.Descriptor instead.
func (PaymentErrorType) EnumDescriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{0}
}

type TransferOptionType int32

const (
	TransferOptionType_FIXED TransferOptionType = 0 // 固定費率
	TransferOptionType_RATE  TransferOptionType = 1 // 比率
)

// Enum value maps for TransferOptionType.
var (
	TransferOptionType_name = map[int32]string{
		0: "FIXED",
		1: "RATE",
	}
	TransferOptionType_value = map[string]int32{
		"FIXED": 0,
		"RATE":  1,
	}
)

func (x TransferOptionType) Enum() *TransferOptionType {
	p := new(TransferOptionType)
	*p = x
	return p
}

func (x TransferOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ams_ams_proto_enumTypes[1].Descriptor()
}

func (TransferOptionType) Type() protoreflect.EnumType {
	return &file_ams_ams_proto_enumTypes[1]
}

func (x TransferOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferOptionType.Descriptor instead.
func (TransferOptionType) EnumDescriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{1}
}

type UpdateBalanceDecreaseReq_WalletEventEnum int32

const (
	UpdateBalanceDecreaseReq_ERROR_WALLET_EVENT                  UpdateBalanceDecreaseReq_WalletEventEnum = 0
	UpdateBalanceDecreaseReq_ACTIVE_PRODUCT                      UpdateBalanceDecreaseReq_WalletEventEnum = 1
	UpdateBalanceDecreaseReq_TRANSACTION_BALANCE_INCREASE        UpdateBalanceDecreaseReq_WalletEventEnum = 2
	UpdateBalanceDecreaseReq_TRANSACTION_REFUND_BALANCE_INCREASE UpdateBalanceDecreaseReq_WalletEventEnum = 3
	UpdateBalanceDecreaseReq_FEE_REFUND_BALANCE_INCREASE         UpdateBalanceDecreaseReq_WalletEventEnum = 4
	UpdateBalanceDecreaseReq_WITHDRAW_REFUND_BALANCE_INCREASE    UpdateBalanceDecreaseReq_WalletEventEnum = 5
	UpdateBalanceDecreaseReq_DEPOSIT_BALANCE_INCREASE            UpdateBalanceDecreaseReq_WalletEventEnum = 6
	UpdateBalanceDecreaseReq_TRANSACTION_BALANCE_DECREASE        UpdateBalanceDecreaseReq_WalletEventEnum = 7
	UpdateBalanceDecreaseReq_FEE_BALANCE_DECREASE                UpdateBalanceDecreaseReq_WalletEventEnum = 8
	UpdateBalanceDecreaseReq_WITHDRAW_BALANCE_DECREASE           UpdateBalanceDecreaseReq_WalletEventEnum = 9
)

// Enum value maps for UpdateBalanceDecreaseReq_WalletEventEnum.
var (
	UpdateBalanceDecreaseReq_WalletEventEnum_name = map[int32]string{
		0: "ERROR_WALLET_EVENT",
		1: "ACTIVE_PRODUCT",
		2: "TRANSACTION_BALANCE_INCREASE",
		3: "TRANSACTION_REFUND_BALANCE_INCREASE",
		4: "FEE_REFUND_BALANCE_INCREASE",
		5: "WITHDRAW_REFUND_BALANCE_INCREASE",
		6: "DEPOSIT_BALANCE_INCREASE",
		7: "TRANSACTION_BALANCE_DECREASE",
		8: "FEE_BALANCE_DECREASE",
		9: "WITHDRAW_BALANCE_DECREASE",
	}
	UpdateBalanceDecreaseReq_WalletEventEnum_value = map[string]int32{
		"ERROR_WALLET_EVENT":                  0,
		"ACTIVE_PRODUCT":                      1,
		"TRANSACTION_BALANCE_INCREASE":        2,
		"TRANSACTION_REFUND_BALANCE_INCREASE": 3,
		"FEE_REFUND_BALANCE_INCREASE":         4,
		"WITHDRAW_REFUND_BALANCE_INCREASE":    5,
		"DEPOSIT_BALANCE_INCREASE":            6,
		"TRANSACTION_BALANCE_DECREASE":        7,
		"FEE_BALANCE_DECREASE":                8,
		"WITHDRAW_BALANCE_DECREASE":           9,
	}
)

func (x UpdateBalanceDecreaseReq_WalletEventEnum) Enum() *UpdateBalanceDecreaseReq_WalletEventEnum {
	p := new(UpdateBalanceDecreaseReq_WalletEventEnum)
	*p = x
	return p
}

func (x UpdateBalanceDecreaseReq_WalletEventEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateBalanceDecreaseReq_WalletEventEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ams_ams_proto_enumTypes[2].Descriptor()
}

func (UpdateBalanceDecreaseReq_WalletEventEnum) Type() protoreflect.EnumType {
	return &file_ams_ams_proto_enumTypes[2]
}

func (x UpdateBalanceDecreaseReq_WalletEventEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateBalanceDecreaseReq_WalletEventEnum.Descriptor instead.
func (UpdateBalanceDecreaseReq_WalletEventEnum) EnumDescriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{10, 0}
}

type UpdateBalanceDecreaseReq_WalletSourceTypeEnum int32

const (
	UpdateBalanceDecreaseReq_OTHER                UpdateBalanceDecreaseReq_WalletSourceTypeEnum = 0
	UpdateBalanceDecreaseReq_DEPOSIT_TO_ORDER     UpdateBalanceDecreaseReq_WalletSourceTypeEnum = 1
	UpdateBalanceDecreaseReq_WITHDRAW_FROM_ORDER  UpdateBalanceDecreaseReq_WalletSourceTypeEnum = 2
	UpdateBalanceDecreaseReq_DEPOSIT_TO_WALLET    UpdateBalanceDecreaseReq_WalletSourceTypeEnum = 3
	UpdateBalanceDecreaseReq_WITHDRAW_FROM_WALLET UpdateBalanceDecreaseReq_WalletSourceTypeEnum = 4
)

// Enum value maps for UpdateBalanceDecreaseReq_WalletSourceTypeEnum.
var (
	UpdateBalanceDecreaseReq_WalletSourceTypeEnum_name = map[int32]string{
		0: "OTHER",
		1: "DEPOSIT_TO_ORDER",
		2: "WITHDRAW_FROM_ORDER",
		3: "DEPOSIT_TO_WALLET",
		4: "WITHDRAW_FROM_WALLET",
	}
	UpdateBalanceDecreaseReq_WalletSourceTypeEnum_value = map[string]int32{
		"OTHER":                0,
		"DEPOSIT_TO_ORDER":     1,
		"WITHDRAW_FROM_ORDER":  2,
		"DEPOSIT_TO_WALLET":    3,
		"WITHDRAW_FROM_WALLET": 4,
	}
)

func (x UpdateBalanceDecreaseReq_WalletSourceTypeEnum) Enum() *UpdateBalanceDecreaseReq_WalletSourceTypeEnum {
	p := new(UpdateBalanceDecreaseReq_WalletSourceTypeEnum)
	*p = x
	return p
}

func (x UpdateBalanceDecreaseReq_WalletSourceTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateBalanceDecreaseReq_WalletSourceTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ams_ams_proto_enumTypes[3].Descriptor()
}

func (UpdateBalanceDecreaseReq_WalletSourceTypeEnum) Type() protoreflect.EnumType {
	return &file_ams_ams_proto_enumTypes[3]
}

func (x UpdateBalanceDecreaseReq_WalletSourceTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateBalanceDecreaseReq_WalletSourceTypeEnum.Descriptor instead.
func (UpdateBalanceDecreaseReq_WalletSourceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{10, 1}
}

type UpdateBalanceDecreaseReq_FeeRateTypeEnum int32

const (
	UpdateBalanceDecreaseReq_ERROR_FEE_RATE_TYPE UpdateBalanceDecreaseReq_FeeRateTypeEnum = 0
	UpdateBalanceDecreaseReq_FIXED               UpdateBalanceDecreaseReq_FeeRateTypeEnum = 1
	UpdateBalanceDecreaseReq_RATIO               UpdateBalanceDecreaseReq_FeeRateTypeEnum = 2
)

// Enum value maps for UpdateBalanceDecreaseReq_FeeRateTypeEnum.
var (
	UpdateBalanceDecreaseReq_FeeRateTypeEnum_name = map[int32]string{
		0: "ERROR_FEE_RATE_TYPE",
		1: "FIXED",
		2: "RATIO",
	}
	UpdateBalanceDecreaseReq_FeeRateTypeEnum_value = map[string]int32{
		"ERROR_FEE_RATE_TYPE": 0,
		"FIXED":               1,
		"RATIO":               2,
	}
)

func (x UpdateBalanceDecreaseReq_FeeRateTypeEnum) Enum() *UpdateBalanceDecreaseReq_FeeRateTypeEnum {
	p := new(UpdateBalanceDecreaseReq_FeeRateTypeEnum)
	*p = x
	return p
}

func (x UpdateBalanceDecreaseReq_FeeRateTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateBalanceDecreaseReq_FeeRateTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ams_ams_proto_enumTypes[4].Descriptor()
}

func (UpdateBalanceDecreaseReq_FeeRateTypeEnum) Type() protoreflect.EnumType {
	return &file_ams_ams_proto_enumTypes[4]
}

func (x UpdateBalanceDecreaseReq_FeeRateTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateBalanceDecreaseReq_FeeRateTypeEnum.Descriptor instead.
func (UpdateBalanceDecreaseReq_FeeRateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{10, 2}
}

// 產品接口
type ProductAPI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Key                 string   `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	ApiKey              string   `protobuf:"bytes,4,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	SecureKey           string   `protobuf:"bytes,5,opt,name=SecureKey,proto3" json:"SecureKey,omitempty"`
	IPWhiteList         []string `protobuf:"bytes,6,rep,name=IPWhiteList,proto3" json:"IPWhiteList,omitempty"`
	MerchantID          int64    `protobuf:"varint,7,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	MerchantName        string   `protobuf:"bytes,8,opt,name=MerchantName,proto3" json:"MerchantName,omitempty"`
	MerchantProjectID   int64    `protobuf:"varint,9,opt,name=MerchantProjectID,proto3" json:"MerchantProjectID,omitempty"`
	MerchantProjectName string   `protobuf:"bytes,10,opt,name=MerchantProjectName,proto3" json:"MerchantProjectName,omitempty"`
	ProductID           int64    `protobuf:"varint,11,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ProductName         string   `protobuf:"bytes,12,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
}

func (x *ProductAPI) Reset() {
	*x = ProductAPI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductAPI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductAPI) ProtoMessage() {}

func (x *ProductAPI) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductAPI.ProtoReflect.Descriptor instead.
func (*ProductAPI) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{0}
}

func (x *ProductAPI) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ProductAPI) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductAPI) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProductAPI) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ProductAPI) GetSecureKey() string {
	if x != nil {
		return x.SecureKey
	}
	return ""
}

func (x *ProductAPI) GetIPWhiteList() []string {
	if x != nil {
		return x.IPWhiteList
	}
	return nil
}

func (x *ProductAPI) GetMerchantID() int64 {
	if x != nil {
		return x.MerchantID
	}
	return 0
}

func (x *ProductAPI) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *ProductAPI) GetMerchantProjectID() int64 {
	if x != nil {
		return x.MerchantProjectID
	}
	return 0
}

func (x *ProductAPI) GetMerchantProjectName() string {
	if x != nil {
		return x.MerchantProjectName
	}
	return ""
}

func (x *ProductAPI) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *ProductAPI) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type MerchantHealthReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MerchantHealthReq) Reset() {
	*x = MerchantHealthReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantHealthReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantHealthReq) ProtoMessage() {}

func (x *MerchantHealthReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantHealthReq.ProtoReflect.Descriptor instead.
func (*MerchantHealthReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{1}
}

type MerchantHealthResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceMap map[string]string `protobuf:"bytes,1,rep,name=ServiceMap,proto3" json:"ServiceMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // server , status .ex: "mysql":"ok" or "mysql":"error_connectFail"
}

func (x *MerchantHealthResp) Reset() {
	*x = MerchantHealthResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantHealthResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantHealthResp) ProtoMessage() {}

func (x *MerchantHealthResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantHealthResp.ProtoReflect.Descriptor instead.
func (*MerchantHealthResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{2}
}

func (x *MerchantHealthResp) GetServiceMap() map[string]string {
	if x != nil {
		return x.ServiceMap
	}
	return nil
}

type GetProductAPIReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	APIKey string `protobuf:"bytes,1,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
}

func (x *GetProductAPIReq) Reset() {
	*x = GetProductAPIReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIReq) ProtoMessage() {}

func (x *GetProductAPIReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIReq.ProtoReflect.Descriptor instead.
func (*GetProductAPIReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{3}
}

func (x *GetProductAPIReq) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

type GetProductAPIResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAPI *ProductAPI `protobuf:"bytes,1,opt,name=ProductAPI,proto3" json:"ProductAPI,omitempty"`
}

func (x *GetProductAPIResp) Reset() {
	*x = GetProductAPIResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIResp) ProtoMessage() {}

func (x *GetProductAPIResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIResp.ProtoReflect.Descriptor instead.
func (*GetProductAPIResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{4}
}

func (x *GetProductAPIResp) GetProductAPI() *ProductAPI {
	if x != nil {
		return x.ProductAPI
	}
	return nil
}

type GetProductAPIV2Req struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	APIKey string `protobuf:"bytes,2,opt,name=APIKey,proto3" json:"APIKey,omitempty"`
}

func (x *GetProductAPIV2Req) Reset() {
	*x = GetProductAPIV2Req{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIV2Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIV2Req) ProtoMessage() {}

func (x *GetProductAPIV2Req) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIV2Req.ProtoReflect.Descriptor instead.
func (*GetProductAPIV2Req) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{5}
}

func (x *GetProductAPIV2Req) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GetProductAPIV2Req) GetAPIKey() string {
	if x != nil {
		return x.APIKey
	}
	return ""
}

type GetProductAPIV2Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAPI *ProductAPI `protobuf:"bytes,1,opt,name=ProductAPI,proto3" json:"ProductAPI,omitempty"`
}

func (x *GetProductAPIV2Resp) Reset() {
	*x = GetProductAPIV2Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIV2Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIV2Resp) ProtoMessage() {}

func (x *GetProductAPIV2Resp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIV2Resp.ProtoReflect.Descriptor instead.
func (*GetProductAPIV2Resp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{6}
}

func (x *GetProductAPIV2Resp) GetProductAPI() *ProductAPI {
	if x != nil {
		return x.ProductAPI
	}
	return nil
}

type GetProductAPIByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetProductAPIByIDReq) Reset() {
	*x = GetProductAPIByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIByIDReq) ProtoMessage() {}

func (x *GetProductAPIByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIByIDReq.ProtoReflect.Descriptor instead.
func (*GetProductAPIByIDReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{7}
}

func (x *GetProductAPIByIDReq) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type GetProductAPIByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAPI *ProductAPI `protobuf:"bytes,1,opt,name=ProductAPI,proto3" json:"ProductAPI,omitempty"`
}

func (x *GetProductAPIByIDResp) Reset() {
	*x = GetProductAPIByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductAPIByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductAPIByIDResp) ProtoMessage() {}

func (x *GetProductAPIByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductAPIByIDResp.ProtoReflect.Descriptor instead.
func (*GetProductAPIByIDResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{8}
}

func (x *GetProductAPIByIDResp) GetProductAPI() *ProductAPI {
	if x != nil {
		return x.ProductAPI
	}
	return nil
}

type UpdateBalanceDecreaseReqs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Req []*UpdateBalanceDecreaseReq `protobuf:"bytes,1,rep,name=Req,proto3" json:"Req,omitempty"`
}

func (x *UpdateBalanceDecreaseReqs) Reset() {
	*x = UpdateBalanceDecreaseReqs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceDecreaseReqs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceDecreaseReqs) ProtoMessage() {}

func (x *UpdateBalanceDecreaseReqs) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceDecreaseReqs.ProtoReflect.Descriptor instead.
func (*UpdateBalanceDecreaseReqs) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBalanceDecreaseReqs) GetReq() []*UpdateBalanceDecreaseReq {
	if x != nil {
		return x.Req
	}
	return nil
}

type UpdateBalanceDecreaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MerchantID       uint64                                        `protobuf:"varint,1,opt,name=MerchantID,proto3" json:"MerchantID,omitempty"`
	ProductID        uint64                                        `protobuf:"varint,2,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	ProjectID        uint64                                        `protobuf:"varint,3,opt,name=ProjectID,proto3" json:"ProjectID,omitempty"`
	OperationBalance float64                                       `protobuf:"fixed64,4,opt,name=OperationBalance,proto3" json:"OperationBalance,omitempty"`
	WalletEvent      UpdateBalanceDecreaseReq_WalletEventEnum      `protobuf:"varint,5,opt,name=WalletEvent,proto3,enum=ams.UpdateBalanceDecreaseReq_WalletEventEnum" json:"WalletEvent,omitempty"`
	FeeRateType      UpdateBalanceDecreaseReq_FeeRateTypeEnum      `protobuf:"varint,6,opt,name=FeeRateType,proto3,enum=ams.UpdateBalanceDecreaseReq_FeeRateTypeEnum" json:"FeeRateType,omitempty"`
	FeeRate          float64                                       `protobuf:"fixed64,7,opt,name=FeeRate,proto3" json:"FeeRate,omitempty"`
	SourceType       UpdateBalanceDecreaseReq_WalletSourceTypeEnum `protobuf:"varint,8,opt,name=SourceType,proto3,enum=ams.UpdateBalanceDecreaseReq_WalletSourceTypeEnum" json:"SourceType,omitempty"`
	SourceTable      string                                        `protobuf:"bytes,9,opt,name=SourceTable,proto3" json:"SourceTable,omitempty"`
	SourceTableKey   string                                        `protobuf:"bytes,10,opt,name=SourceTableKey,proto3" json:"SourceTableKey,omitempty"`
	AllowNegative    bool                                          `protobuf:"varint,11,opt,name=AllowNegative,proto3" json:"AllowNegative,omitempty"`
}

func (x *UpdateBalanceDecreaseReq) Reset() {
	*x = UpdateBalanceDecreaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceDecreaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceDecreaseReq) ProtoMessage() {}

func (x *UpdateBalanceDecreaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceDecreaseReq.ProtoReflect.Descriptor instead.
func (*UpdateBalanceDecreaseReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBalanceDecreaseReq) GetMerchantID() uint64 {
	if x != nil {
		return x.MerchantID
	}
	return 0
}

func (x *UpdateBalanceDecreaseReq) GetProductID() uint64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *UpdateBalanceDecreaseReq) GetProjectID() uint64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *UpdateBalanceDecreaseReq) GetOperationBalance() float64 {
	if x != nil {
		return x.OperationBalance
	}
	return 0
}

func (x *UpdateBalanceDecreaseReq) GetWalletEvent() UpdateBalanceDecreaseReq_WalletEventEnum {
	if x != nil {
		return x.WalletEvent
	}
	return UpdateBalanceDecreaseReq_ERROR_WALLET_EVENT
}

func (x *UpdateBalanceDecreaseReq) GetFeeRateType() UpdateBalanceDecreaseReq_FeeRateTypeEnum {
	if x != nil {
		return x.FeeRateType
	}
	return UpdateBalanceDecreaseReq_ERROR_FEE_RATE_TYPE
}

func (x *UpdateBalanceDecreaseReq) GetFeeRate() float64 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *UpdateBalanceDecreaseReq) GetSourceType() UpdateBalanceDecreaseReq_WalletSourceTypeEnum {
	if x != nil {
		return x.SourceType
	}
	return UpdateBalanceDecreaseReq_OTHER
}

func (x *UpdateBalanceDecreaseReq) GetSourceTable() string {
	if x != nil {
		return x.SourceTable
	}
	return ""
}

func (x *UpdateBalanceDecreaseReq) GetSourceTableKey() string {
	if x != nil {
		return x.SourceTableKey
	}
	return ""
}

func (x *UpdateBalanceDecreaseReq) GetAllowNegative() bool {
	if x != nil {
		return x.AllowNegative
	}
	return false
}

type UpdateBalanceDecreaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *UpdateBalanceDecreaseResp) Reset() {
	*x = UpdateBalanceDecreaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBalanceDecreaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBalanceDecreaseResp) ProtoMessage() {}

func (x *UpdateBalanceDecreaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBalanceDecreaseResp.ProtoReflect.Descriptor instead.
func (*UpdateBalanceDecreaseResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateBalanceDecreaseResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type AccountOrderCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductAPIID               int64    `protobuf:"varint,1,opt,name=ProductAPIID,proto3" json:"ProductAPIID,omitempty"`                               // 產品街口主鍵號
	MerchantName               string   `protobuf:"bytes,2,opt,name=MerchantName,proto3" json:"MerchantName,omitempty"`                                // 商戶姓名
	TrackingNumber             string   `protobuf:"bytes,3,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`                            // 訂單編號
	PlayerID                   string   `protobuf:"bytes,4,opt,name=PlayerID,proto3" json:"PlayerID,omitempty"`                                        // 玩家ID
	DepositDailyLimit          float64  `protobuf:"fixed64,5,opt,name=DepositDailyLimit,proto3" json:"DepositDailyLimit,omitempty"`                    // 玩家ID單日打款總額
	DepositAccountAmount       float64  `protobuf:"fixed64,6,opt,name=DepositAccountAmount,proto3" json:"DepositAccountAmount,omitempty"`              // 打款額度
	WithdrawAccountAmount      float64  `protobuf:"fixed64,7,opt,name=WithdrawAccountAmount,proto3" json:"WithdrawAccountAmount,omitempty"`            // 收款額度
	PaymentType                string   `protobuf:"bytes,8,opt,name=PaymentType,proto3" json:"PaymentType,omitempty"`                                  // 打收款方式
	AccountNumber              string   `protobuf:"bytes,9,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`                              // 卡號或收付款帳號
	AccountDepositDailyTotal   float64  `protobuf:"fixed64,10,opt,name=AccountDepositDailyTotal,proto3" json:"AccountDepositDailyTotal,omitempty"`     // 玩家帳號當日打款總額
	IsNewPlayer                bool     `protobuf:"varint,11,opt,name=IsNewPlayer,proto3" json:"IsNewPlayer,omitempty"`                                // 是否為新玩家
	IsNewAccount               bool     `protobuf:"varint,12,opt,name=IsNewAccount,proto3" json:"IsNewAccount,omitempty"`                              // 是否為舊玩家新收款帳號
	AllowStep                  []string `protobuf:"bytes,13,rep,name=AllowStep,proto3" json:"AllowStep,omitempty"`                                     // 要跳過的風控邏輯代碼
	MerchantDepositDailyAmount float64  `protobuf:"fixed64,14,opt,name=MerchantDepositDailyAmount,proto3" json:"MerchantDepositDailyAmount,omitempty"` // 商戶當日已打款金額
	CallbackURL                string   `protobuf:"bytes,15,opt,name=CallbackURL,proto3" json:"CallbackURL,omitempty"`                                 // 訂單回調地址
}

func (x *AccountOrderCheckReq) Reset() {
	*x = AccountOrderCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountOrderCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountOrderCheckReq) ProtoMessage() {}

func (x *AccountOrderCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountOrderCheckReq.ProtoReflect.Descriptor instead.
func (*AccountOrderCheckReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{12}
}

func (x *AccountOrderCheckReq) GetProductAPIID() int64 {
	if x != nil {
		return x.ProductAPIID
	}
	return 0
}

func (x *AccountOrderCheckReq) GetMerchantName() string {
	if x != nil {
		return x.MerchantName
	}
	return ""
}

func (x *AccountOrderCheckReq) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

func (x *AccountOrderCheckReq) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *AccountOrderCheckReq) GetDepositDailyLimit() float64 {
	if x != nil {
		return x.DepositDailyLimit
	}
	return 0
}

func (x *AccountOrderCheckReq) GetDepositAccountAmount() float64 {
	if x != nil {
		return x.DepositAccountAmount
	}
	return 0
}

func (x *AccountOrderCheckReq) GetWithdrawAccountAmount() float64 {
	if x != nil {
		return x.WithdrawAccountAmount
	}
	return 0
}

func (x *AccountOrderCheckReq) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *AccountOrderCheckReq) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *AccountOrderCheckReq) GetAccountDepositDailyTotal() float64 {
	if x != nil {
		return x.AccountDepositDailyTotal
	}
	return 0
}

func (x *AccountOrderCheckReq) GetIsNewPlayer() bool {
	if x != nil {
		return x.IsNewPlayer
	}
	return false
}

func (x *AccountOrderCheckReq) GetIsNewAccount() bool {
	if x != nil {
		return x.IsNewAccount
	}
	return false
}

func (x *AccountOrderCheckReq) GetAllowStep() []string {
	if x != nil {
		return x.AllowStep
	}
	return nil
}

func (x *AccountOrderCheckReq) GetMerchantDepositDailyAmount() float64 {
	if x != nil {
		return x.MerchantDepositDailyAmount
	}
	return 0
}

func (x *AccountOrderCheckReq) GetCallbackURL() string {
	if x != nil {
		return x.CallbackURL
	}
	return ""
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                       // 渠道編號
	Code          string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`                    // 渠道代碼
	Name          string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`                    // 渠道名稱
	Timeout       int64  `protobuf:"varint,4,opt,name=Timeout,proto3" json:"Timeout,omitempty"`             // 訂單建立過多久沒收到回調轉為 [待確認] （time.Duration)
	CallbackRetry int64  `protobuf:"varint,5,opt,name=CallbackRetry,proto3" json:"CallbackRetry,omitempty"` // 渠道建單|回調失敗重試次數
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{13}
}

func (x *Channel) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Channel) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Channel) GetCallbackRetry() int64 {
	if x != nil {
		return x.CallbackRetry
	}
	return 0
}

type AccountOrderCheckResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow                  bool               `protobuf:"varint,1,opt,name=IsAllow,proto3" json:"IsAllow,omitempty"`                                                               // 是否通過風控
	PaymentErrorType         PaymentErrorType   `protobuf:"varint,2,opt,name=PaymentErrorType,proto3,enum=ams.PaymentErrorType" json:"PaymentErrorType,omitempty"`                   // 錯誤類型
	AllowChannel             []*Channel         `protobuf:"bytes,3,rep,name=AllowChannel,proto3" json:"AllowChannel,omitempty"`                                                      // 允許的渠道權重從大至小排序
	DepositToPlayerOption    TransferOptionType `protobuf:"varint,4,opt,name=DepositToPlayerOption,proto3,enum=ams.TransferOptionType" json:"DepositToPlayerOption,omitempty"`       // 打款手續費選項
	WithdrawFromPlayerOption TransferOptionType `protobuf:"varint,5,opt,name=WithdrawFromPlayerOption,proto3,enum=ams.TransferOptionType" json:"WithdrawFromPlayerOption,omitempty"` // 收款手續費選項
	DepositFeeToPlayer       float64            `protobuf:"fixed64,6,opt,name=DepositFeeToPlayer,proto3" json:"DepositFeeToPlayer,omitempty"`                                        // 打款手續費
	WithdrawFeeFromPlayer    float64            `protobuf:"fixed64,7,opt,name=WithdrawFeeFromPlayer,proto3" json:"WithdrawFeeFromPlayer,omitempty"`                                  // 收款手續費
	AllowNegative            bool               `protobuf:"varint,8,opt,name=AllowNegative,proto3" json:"AllowNegative,omitempty"`                                                   // 允許錢包負數
	BBCode                   []string           `protobuf:"bytes,9,rep,name=BBCode,proto3" json:"BBCode,omitempty"`                                                                  // 風控暫停原因
	TrackingNumber           string             `protobuf:"bytes,10,opt,name=TrackingNumber,proto3" json:"TrackingNumber,omitempty"`                                                 // 訂單編號
}

func (x *AccountOrderCheckResp) Reset() {
	*x = AccountOrderCheckResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountOrderCheckResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountOrderCheckResp) ProtoMessage() {}

func (x *AccountOrderCheckResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountOrderCheckResp.ProtoReflect.Descriptor instead.
func (*AccountOrderCheckResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{14}
}

func (x *AccountOrderCheckResp) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *AccountOrderCheckResp) GetPaymentErrorType() PaymentErrorType {
	if x != nil {
		return x.PaymentErrorType
	}
	return PaymentErrorType_NO_ERROR
}

func (x *AccountOrderCheckResp) GetAllowChannel() []*Channel {
	if x != nil {
		return x.AllowChannel
	}
	return nil
}

func (x *AccountOrderCheckResp) GetDepositToPlayerOption() TransferOptionType {
	if x != nil {
		return x.DepositToPlayerOption
	}
	return TransferOptionType_FIXED
}

func (x *AccountOrderCheckResp) GetWithdrawFromPlayerOption() TransferOptionType {
	if x != nil {
		return x.WithdrawFromPlayerOption
	}
	return TransferOptionType_FIXED
}

func (x *AccountOrderCheckResp) GetDepositFeeToPlayer() float64 {
	if x != nil {
		return x.DepositFeeToPlayer
	}
	return 0
}

func (x *AccountOrderCheckResp) GetWithdrawFeeFromPlayer() float64 {
	if x != nil {
		return x.WithdrawFeeFromPlayer
	}
	return 0
}

func (x *AccountOrderCheckResp) GetAllowNegative() bool {
	if x != nil {
		return x.AllowNegative
	}
	return false
}

func (x *AccountOrderCheckResp) GetBBCode() []string {
	if x != nil {
		return x.BBCode
	}
	return nil
}

func (x *AccountOrderCheckResp) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

type RetryAndAlertSettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RetryAndAlertSettingReq) Reset() {
	*x = RetryAndAlertSettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryAndAlertSettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryAndAlertSettingReq) ProtoMessage() {}

func (x *RetryAndAlertSettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryAndAlertSettingReq.ProtoReflect.Descriptor instead.
func (*RetryAndAlertSettingReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{15}
}

type RetryAndAlertSettingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryCount int64 `protobuf:"varint,1,opt,name=RetryCount,proto3" json:"RetryCount,omitempty"` // 建單失敗重試次數
}

func (x *RetryAndAlertSettingResp) Reset() {
	*x = RetryAndAlertSettingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryAndAlertSettingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryAndAlertSettingResp) ProtoMessage() {}

func (x *RetryAndAlertSettingResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryAndAlertSettingResp.ProtoReflect.Descriptor instead.
func (*RetryAndAlertSettingResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{16}
}

func (x *RetryAndAlertSettingResp) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

type GetChannelTimeoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChannelTimeoutReq) Reset() {
	*x = GetChannelTimeoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelTimeoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelTimeoutReq) ProtoMessage() {}

func (x *GetChannelTimeoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelTimeoutReq.ProtoReflect.Descriptor instead.
func (*GetChannelTimeoutReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{17}
}

type ChannelSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`                        // 渠道代碼
	DepositTimeout  int64  `protobuf:"varint,2,opt,name=DepositTimeout,proto3" json:"DepositTimeout,omitempty"`   // 打款訂單建立過多久沒收到回調轉為 [待確認] （time.Duration)
	WithdrawTimeout int64  `protobuf:"varint,3,opt,name=WithdrawTimeout,proto3" json:"WithdrawTimeout,omitempty"` // 收款訂單建立過多久沒收到回調轉為 [待確認] （time.Duration)
}

func (x *ChannelSetting) Reset() {
	*x = ChannelSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSetting) ProtoMessage() {}

func (x *ChannelSetting) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSetting.ProtoReflect.Descriptor instead.
func (*ChannelSetting) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelSetting) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ChannelSetting) GetDepositTimeout() int64 {
	if x != nil {
		return x.DepositTimeout
	}
	return 0
}

func (x *ChannelSetting) GetWithdrawTimeout() int64 {
	if x != nil {
		return x.WithdrawTimeout
	}
	return 0
}

type GetChannelTimeoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels []*ChannelSetting `protobuf:"bytes,1,rep,name=Channels,proto3" json:"Channels,omitempty"` // 渠道資料
}

func (x *GetChannelTimeoutResp) Reset() {
	*x = GetChannelTimeoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelTimeoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelTimeoutResp) ProtoMessage() {}

func (x *GetChannelTimeoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelTimeoutResp.ProtoReflect.Descriptor instead.
func (*GetChannelTimeoutResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{19}
}

func (x *GetChannelTimeoutResp) GetChannels() []*ChannelSetting {
	if x != nil {
		return x.Channels
	}
	return nil
}

type GetFeedBackOpenCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFeedBackOpenCountReq) Reset() {
	*x = GetFeedBackOpenCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeedBackOpenCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeedBackOpenCountReq) ProtoMessage() {}

func (x *GetFeedBackOpenCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeedBackOpenCountReq.ProtoReflect.Descriptor instead.
func (*GetFeedBackOpenCountReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{20}
}

type GetFeedBackOpenCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *GetFeedBackOpenCountResp) Reset() {
	*x = GetFeedBackOpenCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeedBackOpenCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeedBackOpenCountResp) ProtoMessage() {}

func (x *GetFeedBackOpenCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeedBackOpenCountResp.ProtoReflect.Descriptor instead.
func (*GetFeedBackOpenCountResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{21}
}

func (x *GetFeedBackOpenCountResp) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SetFeedBackDoneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFeedBackDoneReq) Reset() {
	*x = SetFeedBackDoneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFeedBackDoneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFeedBackDoneReq) ProtoMessage() {}

func (x *SetFeedBackDoneReq) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFeedBackDoneReq.ProtoReflect.Descriptor instead.
func (*SetFeedBackDoneReq) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{22}
}

type SetFeedBackDoneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFeedBackDoneResp) Reset() {
	*x = SetFeedBackDoneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ams_ams_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFeedBackDoneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFeedBackDoneResp) ProtoMessage() {}

func (x *SetFeedBackDoneResp) ProtoReflect() protoreflect.Message {
	mi := &file_ams_ams_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFeedBackDoneResp.ProtoReflect.Descriptor instead.
func (*SetFeedBackDoneResp) Descriptor() ([]byte, []int) {
	return file_ams_ams_proto_rawDescGZIP(), []int{23}
}

var File_ams_ams_proto protoreflect.FileDescriptor

var file_ams_ams_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x6d, 0x73, 0x2f, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x6d, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x50, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x50, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x22, 0x9c, 0x01, 0x0a, 0x12, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x47, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x52,
	0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x22, 0x3c, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x56, 0x32, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x41, 0x50, 0x49, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50,
	0x49, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x50, 0x49, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2f, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x22, 0x4c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x73,
	0x12, 0x2f, 0x0a, 0x03, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x03, 0x52, 0x65,
	0x71, 0x22, 0xb3, 0x08, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x6d,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61,
	0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45,
	0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10,
	0x09, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x57, 0x41, 0x4c,
	0x4c, 0x45, 0x54, 0x10, 0x04, 0x22, 0x40, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84, 0x05, 0x0a,
	0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x52, 0x4c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x55, 0x52, 0x4c, 0x22, 0x81, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0x96, 0x04, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x10, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x4d, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x53, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46,
	0x65, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x42, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x42, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22, 0x3a, 0x0a, 0x18, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x22,
	0x76, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x48, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x2f, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x30, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x14,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2a, 0xfd, 0x03, 0x0a, 0x10,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x45, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x41, 0x50, 0x49, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x41,
	0x50, 0x49, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x0a,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x43,
	0x48, 0x41, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x1d,
	0x0a, 0x19, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41,
	0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x0c, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10,
	0x10, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49,
	0x53, 0x53, 0x54, 0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x12, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x52, 0x52, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x14,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x16, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x53, 0x10, 0x17, 0x2a, 0x29, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x01, 0x32, 0xae, 0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x42, 0x79, 0x49, 0x44, 0x12,
	0x19, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x50, 0x49, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x6d, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x12, 0x15, 0x2e, 0x61, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x50, 0x49, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x56, 0x32, 0x12, 0x17, 0x2e,
	0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50,
	0x49, 0x56, 0x32, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x50, 0x49, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61,
	0x6d, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0x6a, 0x0a, 0x0d, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x1e, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x73, 0x1a, 0x1e, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x00, 0x32, 0x81, 0x02, 0x0a, 0x09, 0x42, 0x42, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12,
	0x58, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x61, 0x6d, 0x73,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x19,
	0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x61, 0x6d, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x32, 0xb0, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x42, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1d, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42,
	0x61, 0x63, 0x6b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63,
	0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x73, 0x69, 0x6c, 0x6b, 0x72, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x77, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6b, 0x62, 0x63, 0x5f,
	0x70, 0x62, 0x2f, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ams_ams_proto_rawDescOnce sync.Once
	file_ams_ams_proto_rawDescData = file_ams_ams_proto_rawDesc
)

func file_ams_ams_proto_rawDescGZIP() []byte {
	file_ams_ams_proto_rawDescOnce.Do(func() {
		file_ams_ams_proto_rawDescData = protoimpl.X.CompressGZIP(file_ams_ams_proto_rawDescData)
	})
	return file_ams_ams_proto_rawDescData
}

var file_ams_ams_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ams_ams_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ams_ams_proto_goTypes = []interface{}{
	(PaymentErrorType)(0),                              // 0: ams.PaymentErrorType
	(TransferOptionType)(0),                            // 1: ams.TransferOptionType
	(UpdateBalanceDecreaseReq_WalletEventEnum)(0),      // 2: ams.UpdateBalanceDecreaseReq.WalletEventEnum
	(UpdateBalanceDecreaseReq_WalletSourceTypeEnum)(0), // 3: ams.UpdateBalanceDecreaseReq.WalletSourceTypeEnum
	(UpdateBalanceDecreaseReq_FeeRateTypeEnum)(0),      // 4: ams.UpdateBalanceDecreaseReq.FeeRateTypeEnum
	(*ProductAPI)(nil),                                 // 5: ams.ProductAPI
	(*MerchantHealthReq)(nil),                          // 6: ams.MerchantHealthReq
	(*MerchantHealthResp)(nil),                         // 7: ams.MerchantHealthResp
	(*GetProductAPIReq)(nil),                           // 8: ams.GetProductAPIReq
	(*GetProductAPIResp)(nil),                          // 9: ams.GetProductAPIResp
	(*GetProductAPIV2Req)(nil),                         // 10: ams.GetProductAPIV2Req
	(*GetProductAPIV2Resp)(nil),                        // 11: ams.GetProductAPIV2Resp
	(*GetProductAPIByIDReq)(nil),                       // 12: ams.GetProductAPIByIDReq
	(*GetProductAPIByIDResp)(nil),                      // 13: ams.GetProductAPIByIDResp
	(*UpdateBalanceDecreaseReqs)(nil),                  // 14: ams.UpdateBalanceDecreaseReqs
	(*UpdateBalanceDecreaseReq)(nil),                   // 15: ams.UpdateBalanceDecreaseReq
	(*UpdateBalanceDecreaseResp)(nil),                  // 16: ams.UpdateBalanceDecreaseResp
	(*AccountOrderCheckReq)(nil),                       // 17: ams.AccountOrderCheckReq
	(*Channel)(nil),                                    // 18: ams.Channel
	(*AccountOrderCheckResp)(nil),                      // 19: ams.AccountOrderCheckResp
	(*RetryAndAlertSettingReq)(nil),                    // 20: ams.RetryAndAlertSettingReq
	(*RetryAndAlertSettingResp)(nil),                   // 21: ams.RetryAndAlertSettingResp
	(*GetChannelTimeoutReq)(nil),                       // 22: ams.GetChannelTimeoutReq
	(*ChannelSetting)(nil),                             // 23: ams.ChannelSetting
	(*GetChannelTimeoutResp)(nil),                      // 24: ams.GetChannelTimeoutResp
	(*GetFeedBackOpenCountReq)(nil),                    // 25: ams.GetFeedBackOpenCountReq
	(*GetFeedBackOpenCountResp)(nil),                   // 26: ams.GetFeedBackOpenCountResp
	(*SetFeedBackDoneReq)(nil),                         // 27: ams.SetFeedBackDoneReq
	(*SetFeedBackDoneResp)(nil),                        // 28: ams.SetFeedBackDoneResp
	nil,                                                // 29: ams.MerchantHealthResp.ServiceMapEntry
}
var file_ams_ams_proto_depIdxs = []int32{
	29, // 0: ams.MerchantHealthResp.ServiceMap:type_name -> ams.MerchantHealthResp.ServiceMapEntry
	5,  // 1: ams.GetProductAPIResp.ProductAPI:type_name -> ams.ProductAPI
	5,  // 2: ams.GetProductAPIV2Resp.ProductAPI:type_name -> ams.ProductAPI
	5,  // 3: ams.GetProductAPIByIDResp.ProductAPI:type_name -> ams.ProductAPI
	15, // 4: ams.UpdateBalanceDecreaseReqs.Req:type_name -> ams.UpdateBalanceDecreaseReq
	2,  // 5: ams.UpdateBalanceDecreaseReq.WalletEvent:type_name -> ams.UpdateBalanceDecreaseReq.WalletEventEnum
	4,  // 6: ams.UpdateBalanceDecreaseReq.FeeRateType:type_name -> ams.UpdateBalanceDecreaseReq.FeeRateTypeEnum
	3,  // 7: ams.UpdateBalanceDecreaseReq.SourceType:type_name -> ams.UpdateBalanceDecreaseReq.WalletSourceTypeEnum
	0,  // 8: ams.AccountOrderCheckResp.PaymentErrorType:type_name -> ams.PaymentErrorType
	18, // 9: ams.AccountOrderCheckResp.AllowChannel:type_name -> ams.Channel
	1,  // 10: ams.AccountOrderCheckResp.DepositToPlayerOption:type_name -> ams.TransferOptionType
	1,  // 11: ams.AccountOrderCheckResp.WithdrawFromPlayerOption:type_name -> ams.TransferOptionType
	23, // 12: ams.GetChannelTimeoutResp.Channels:type_name -> ams.ChannelSetting
	12, // 13: ams.MerchantService.GetProductAPIByID:input_type -> ams.GetProductAPIByIDReq
	8,  // 14: ams.MerchantService.GetProductAPI:input_type -> ams.GetProductAPIReq
	10, // 15: ams.MerchantService.GetProductAPIV2:input_type -> ams.GetProductAPIV2Req
	6,  // 16: ams.MerchantService.MerchantHealth:input_type -> ams.MerchantHealthReq
	14, // 17: ams.WalletService.UpdateBalanceDecrease:input_type -> ams.UpdateBalanceDecreaseReqs
	17, // 18: ams.BBService.AccountOrderCheck:input_type -> ams.AccountOrderCheckReq
	20, // 19: ams.BBService.GetRetryAndAlertSetting:input_type -> ams.RetryAndAlertSettingReq
	22, // 20: ams.BBService.GetChannelTimeout:input_type -> ams.GetChannelTimeoutReq
	25, // 21: ams.FeedbackService.GetFeedBackOpenCount:input_type -> ams.GetFeedBackOpenCountReq
	27, // 22: ams.FeedbackService.SetFeedBackDone:input_type -> ams.SetFeedBackDoneReq
	13, // 23: ams.MerchantService.GetProductAPIByID:output_type -> ams.GetProductAPIByIDResp
	9,  // 24: ams.MerchantService.GetProductAPI:output_type -> ams.GetProductAPIResp
	11, // 25: ams.MerchantService.GetProductAPIV2:output_type -> ams.GetProductAPIV2Resp
	7,  // 26: ams.MerchantService.MerchantHealth:output_type -> ams.MerchantHealthResp
	16, // 27: ams.WalletService.UpdateBalanceDecrease:output_type -> ams.UpdateBalanceDecreaseResp
	19, // 28: ams.BBService.AccountOrderCheck:output_type -> ams.AccountOrderCheckResp
	21, // 29: ams.BBService.GetRetryAndAlertSetting:output_type -> ams.RetryAndAlertSettingResp
	24, // 30: ams.BBService.GetChannelTimeout:output_type -> ams.GetChannelTimeoutResp
	26, // 31: ams.FeedbackService.GetFeedBackOpenCount:output_type -> ams.GetFeedBackOpenCountResp
	28, // 32: ams.FeedbackService.SetFeedBackDone:output_type -> ams.SetFeedBackDoneResp
	23, // [23:33] is the sub-list for method output_type
	13, // [13:23] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ams_ams_proto_init() }
func file_ams_ams_proto_init() {
	if File_ams_ams_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ams_ams_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductAPI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantHealthReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantHealthResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIV2Req); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIV2Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductAPIByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceDecreaseReqs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceDecreaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBalanceDecreaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountOrderCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountOrderCheckResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryAndAlertSettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryAndAlertSettingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelTimeoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelTimeoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeedBackOpenCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeedBackOpenCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFeedBackDoneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ams_ams_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFeedBackDoneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ams_ams_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_ams_ams_proto_goTypes,
		DependencyIndexes: file_ams_ams_proto_depIdxs,
		EnumInfos:         file_ams_ams_proto_enumTypes,
		MessageInfos:      file_ams_ams_proto_msgTypes,
	}.Build()
	File_ams_ams_proto = out.File
	file_ams_ams_proto_rawDesc = nil
	file_ams_ams_proto_goTypes = nil
	file_ams_ams_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	GetProductAPIByID(ctx context.Context, in *GetProductAPIByIDReq, opts ...grpc.CallOption) (*GetProductAPIByIDResp, error)
	// v1
	GetProductAPI(ctx context.Context, in *GetProductAPIReq, opts ...grpc.CallOption) (*GetProductAPIResp, error)
	// v2
	GetProductAPIV2(ctx context.Context, in *GetProductAPIV2Req, opts ...grpc.CallOption) (*GetProductAPIV2Resp, error)
	//  Merchant健康確認
	MerchantHealth(ctx context.Context, in *MerchantHealthReq, opts ...grpc.CallOption) (*MerchantHealthResp, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetProductAPIByID(ctx context.Context, in *GetProductAPIByIDReq, opts ...grpc.CallOption) (*GetProductAPIByIDResp, error) {
	out := new(GetProductAPIByIDResp)
	err := c.cc.Invoke(ctx, "/ams.MerchantService/GetProductAPIByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetProductAPI(ctx context.Context, in *GetProductAPIReq, opts ...grpc.CallOption) (*GetProductAPIResp, error) {
	out := new(GetProductAPIResp)
	err := c.cc.Invoke(ctx, "/ams.MerchantService/GetProductAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetProductAPIV2(ctx context.Context, in *GetProductAPIV2Req, opts ...grpc.CallOption) (*GetProductAPIV2Resp, error) {
	out := new(GetProductAPIV2Resp)
	err := c.cc.Invoke(ctx, "/ams.MerchantService/GetProductAPIV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) MerchantHealth(ctx context.Context, in *MerchantHealthReq, opts ...grpc.CallOption) (*MerchantHealthResp, error) {
	out := new(MerchantHealthResp)
	err := c.cc.Invoke(ctx, "/ams.MerchantService/MerchantHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	GetProductAPIByID(context.Context, *GetProductAPIByIDReq) (*GetProductAPIByIDResp, error)
	// v1
	GetProductAPI(context.Context, *GetProductAPIReq) (*GetProductAPIResp, error)
	// v2
	GetProductAPIV2(context.Context, *GetProductAPIV2Req) (*GetProductAPIV2Resp, error)
	//  Merchant健康確認
	MerchantHealth(context.Context, *MerchantHealthReq) (*MerchantHealthResp, error)
}

// UnimplementedMerchantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (*UnimplementedMerchantServiceServer) GetProductAPIByID(context.Context, *GetProductAPIByIDReq) (*GetProductAPIByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAPIByID not implemented")
}
func (*UnimplementedMerchantServiceServer) GetProductAPI(context.Context, *GetProductAPIReq) (*GetProductAPIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAPI not implemented")
}
func (*UnimplementedMerchantServiceServer) GetProductAPIV2(context.Context, *GetProductAPIV2Req) (*GetProductAPIV2Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAPIV2 not implemented")
}
func (*UnimplementedMerchantServiceServer) MerchantHealth(context.Context, *MerchantHealthReq) (*MerchantHealthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantHealth not implemented")
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_GetProductAPIByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAPIByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetProductAPIByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.MerchantService/GetProductAPIByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetProductAPIByID(ctx, req.(*GetProductAPIByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetProductAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAPIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetProductAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.MerchantService/GetProductAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetProductAPI(ctx, req.(*GetProductAPIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetProductAPIV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAPIV2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetProductAPIV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.MerchantService/GetProductAPIV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetProductAPIV2(ctx, req.(*GetProductAPIV2Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_MerchantHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantHealthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).MerchantHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.MerchantService/MerchantHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).MerchantHealth(ctx, req.(*MerchantHealthReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ams.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductAPIByID",
			Handler:    _MerchantService_GetProductAPIByID_Handler,
		},
		{
			MethodName: "GetProductAPI",
			Handler:    _MerchantService_GetProductAPI_Handler,
		},
		{
			MethodName: "GetProductAPIV2",
			Handler:    _MerchantService_GetProductAPIV2_Handler,
		},
		{
			MethodName: "MerchantHealth",
			Handler:    _MerchantService_MerchantHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ams/ams.proto",
}

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletServiceClient interface {
	UpdateBalanceDecrease(ctx context.Context, in *UpdateBalanceDecreaseReqs, opts ...grpc.CallOption) (*UpdateBalanceDecreaseResp, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) UpdateBalanceDecrease(ctx context.Context, in *UpdateBalanceDecreaseReqs, opts ...grpc.CallOption) (*UpdateBalanceDecreaseResp, error) {
	out := new(UpdateBalanceDecreaseResp)
	err := c.cc.Invoke(ctx, "/ams.WalletService/UpdateBalanceDecrease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
type WalletServiceServer interface {
	UpdateBalanceDecrease(context.Context, *UpdateBalanceDecreaseReqs) (*UpdateBalanceDecreaseResp, error)
}

// UnimplementedWalletServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServiceServer struct {
}

func (*UnimplementedWalletServiceServer) UpdateBalanceDecrease(context.Context, *UpdateBalanceDecreaseReqs) (*UpdateBalanceDecreaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalanceDecrease not implemented")
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_UpdateBalanceDecrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBalanceDecreaseReqs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UpdateBalanceDecrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.WalletService/UpdateBalanceDecrease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UpdateBalanceDecrease(ctx, req.(*UpdateBalanceDecreaseReqs))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ams.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateBalanceDecrease",
			Handler:    _WalletService_UpdateBalanceDecrease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ams/ams.proto",
}

// BBServiceClient is the client API for BBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BBServiceClient interface {
	AccountOrderCheck(ctx context.Context, in *AccountOrderCheckReq, opts ...grpc.CallOption) (*AccountOrderCheckResp, error)
	GetRetryAndAlertSetting(ctx context.Context, in *RetryAndAlertSettingReq, opts ...grpc.CallOption) (*RetryAndAlertSettingResp, error)
	GetChannelTimeout(ctx context.Context, in *GetChannelTimeoutReq, opts ...grpc.CallOption) (*GetChannelTimeoutResp, error)
}

type bBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBBServiceClient(cc grpc.ClientConnInterface) BBServiceClient {
	return &bBServiceClient{cc}
}

func (c *bBServiceClient) AccountOrderCheck(ctx context.Context, in *AccountOrderCheckReq, opts ...grpc.CallOption) (*AccountOrderCheckResp, error) {
	out := new(AccountOrderCheckResp)
	err := c.cc.Invoke(ctx, "/ams.BBService/AccountOrderCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBServiceClient) GetRetryAndAlertSetting(ctx context.Context, in *RetryAndAlertSettingReq, opts ...grpc.CallOption) (*RetryAndAlertSettingResp, error) {
	out := new(RetryAndAlertSettingResp)
	err := c.cc.Invoke(ctx, "/ams.BBService/GetRetryAndAlertSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBServiceClient) GetChannelTimeout(ctx context.Context, in *GetChannelTimeoutReq, opts ...grpc.CallOption) (*GetChannelTimeoutResp, error) {
	out := new(GetChannelTimeoutResp)
	err := c.cc.Invoke(ctx, "/ams.BBService/GetChannelTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BBServiceServer is the server API for BBService service.
type BBServiceServer interface {
	AccountOrderCheck(context.Context, *AccountOrderCheckReq) (*AccountOrderCheckResp, error)
	GetRetryAndAlertSetting(context.Context, *RetryAndAlertSettingReq) (*RetryAndAlertSettingResp, error)
	GetChannelTimeout(context.Context, *GetChannelTimeoutReq) (*GetChannelTimeoutResp, error)
}

// UnimplementedBBServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBBServiceServer struct {
}

func (*UnimplementedBBServiceServer) AccountOrderCheck(context.Context, *AccountOrderCheckReq) (*AccountOrderCheckResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountOrderCheck not implemented")
}
func (*UnimplementedBBServiceServer) GetRetryAndAlertSetting(context.Context, *RetryAndAlertSettingReq) (*RetryAndAlertSettingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetryAndAlertSetting not implemented")
}
func (*UnimplementedBBServiceServer) GetChannelTimeout(context.Context, *GetChannelTimeoutReq) (*GetChannelTimeoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelTimeout not implemented")
}

func RegisterBBServiceServer(s *grpc.Server, srv BBServiceServer) {
	s.RegisterService(&_BBService_serviceDesc, srv)
}

func _BBService_AccountOrderCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountOrderCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBServiceServer).AccountOrderCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.BBService/AccountOrderCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBServiceServer).AccountOrderCheck(ctx, req.(*AccountOrderCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBService_GetRetryAndAlertSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryAndAlertSettingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBServiceServer).GetRetryAndAlertSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.BBService/GetRetryAndAlertSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBServiceServer).GetRetryAndAlertSetting(ctx, req.(*RetryAndAlertSettingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBService_GetChannelTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelTimeoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBServiceServer).GetChannelTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.BBService/GetChannelTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBServiceServer).GetChannelTimeout(ctx, req.(*GetChannelTimeoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BBService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ams.BBService",
	HandlerType: (*BBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountOrderCheck",
			Handler:    _BBService_AccountOrderCheck_Handler,
		},
		{
			MethodName: "GetRetryAndAlertSetting",
			Handler:    _BBService_GetRetryAndAlertSetting_Handler,
		},
		{
			MethodName: "GetChannelTimeout",
			Handler:    _BBService_GetChannelTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ams/ams.proto",
}

// FeedbackServiceClient is the client API for FeedbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeedbackServiceClient interface {
	GetFeedBackOpenCount(ctx context.Context, in *GetFeedBackOpenCountReq, opts ...grpc.CallOption) (*GetFeedBackOpenCountResp, error)
	SetFeedBackDone(ctx context.Context, in *SetFeedBackDoneReq, opts ...grpc.CallOption) (*SetFeedBackDoneResp, error)
}

type feedbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedbackServiceClient(cc grpc.ClientConnInterface) FeedbackServiceClient {
	return &feedbackServiceClient{cc}
}

func (c *feedbackServiceClient) GetFeedBackOpenCount(ctx context.Context, in *GetFeedBackOpenCountReq, opts ...grpc.CallOption) (*GetFeedBackOpenCountResp, error) {
	out := new(GetFeedBackOpenCountResp)
	err := c.cc.Invoke(ctx, "/ams.FeedbackService/GetFeedBackOpenCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackServiceClient) SetFeedBackDone(ctx context.Context, in *SetFeedBackDoneReq, opts ...grpc.CallOption) (*SetFeedBackDoneResp, error) {
	out := new(SetFeedBackDoneResp)
	err := c.cc.Invoke(ctx, "/ams.FeedbackService/SetFeedBackDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedbackServiceServer is the server API for FeedbackService service.
type FeedbackServiceServer interface {
	GetFeedBackOpenCount(context.Context, *GetFeedBackOpenCountReq) (*GetFeedBackOpenCountResp, error)
	SetFeedBackDone(context.Context, *SetFeedBackDoneReq) (*SetFeedBackDoneResp, error)
}

// UnimplementedFeedbackServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFeedbackServiceServer struct {
}

func (*UnimplementedFeedbackServiceServer) GetFeedBackOpenCount(context.Context, *GetFeedBackOpenCountReq) (*GetFeedBackOpenCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeedBackOpenCount not implemented")
}
func (*UnimplementedFeedbackServiceServer) SetFeedBackDone(context.Context, *SetFeedBackDoneReq) (*SetFeedBackDoneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeedBackDone not implemented")
}

func RegisterFeedbackServiceServer(s *grpc.Server, srv FeedbackServiceServer) {
	s.RegisterService(&_FeedbackService_serviceDesc, srv)
}

func _FeedbackService_GetFeedBackOpenCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeedBackOpenCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).GetFeedBackOpenCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.FeedbackService/GetFeedBackOpenCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).GetFeedBackOpenCount(ctx, req.(*GetFeedBackOpenCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeedbackService_SetFeedBackDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeedBackDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedbackServiceServer).SetFeedBackDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ams.FeedbackService/SetFeedBackDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedbackServiceServer).SetFeedBackDone(ctx, req.(*SetFeedBackDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedbackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ams.FeedbackService",
	HandlerType: (*FeedbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeedBackOpenCount",
			Handler:    _FeedbackService_GetFeedBackOpenCount_Handler,
		},
		{
			MethodName: "SetFeedBackDone",
			Handler:    _FeedbackService_SetFeedBackDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ams/ams.proto",
}
